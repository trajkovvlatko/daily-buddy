generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}


// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model User {
  id                  Int        @id @default(autoincrement())
  email               String     @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  Calendar            Calendar[]
  Task                Task[]
  Note                Note[]
  Journal             Journal[]
  Color               Color[]
  ItemType            ItemType[]
  Room                Room[]
  StorageUnit         StorageUnit[]
  Drawer              Drawer[]
  Item                Item[]
  Streak              Streak[]
  Grocery             Grocery[]
  Access              Access[]
  ShoppingList        ShoppingList[]
  Person              Person[]
  CallLog             CallLog[]
  Project             Project[]
}

model Calendar {
  id        Int      @id @default(autoincrement())
  title     String
  color     String
  url       String   @db.Text
  User      User     @relation(references: [id], fields: [userId])
  createdAt DateTime @default(now())
  userId    Int

  @@index([userId], name: "calendar_user")
}

model Task {
  id          Int         @id @default(autoincrement())
  title       String
  dueDate     DateTime?   @db.Date
  priority    Int         @default(3)
  completed   Boolean     @default(false)
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "task_user")
  @@index([userId, dueDate, completed], name: "user_id_due_date_completed")
}

model Note {
  id          Int         @id @default(autoincrement())
  path        String
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  accesses Access[] @relation("NoteAccess")

  @@index([userId], name: "note_user")
}

model Journal {
  id          Int         @id @default(autoincrement())
  forDate     DateTime    @db.Date
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "journal_user")
  @@index([forDate], name: "for_date")
}

model Color {
  id          Int         @id @default(autoincrement())
  color       String
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int
  Item        Item[]

  @@index([userId], name: "color_user")
}

model ItemType {
  id          Int         @id @default(autoincrement())
  itemType    String
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int
  Item        Item[]

  @@index([userId], name: "item_type_user")
}

model Room {
  id          Int         @id @default(autoincrement())
  name        String
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int
  StorageUnit StorageUnit[]

  @@index([userId], name: "room_user")
}

model StorageUnit {
  id          Int         @id @default(autoincrement())
  name        String
  createdAt   DateTime    @default(now())
  Room        Room        @relation(references: [id], fields: [roomId])
  roomId      Int
  User        User        @relation(references: [id], fields: [userId])
  userId      Int
  Drawer      Drawer[]

  @@index([userId], name: "storage_unit_user")
  @@index([roomId], name: "room")
}

model Drawer {
  id                 Int         @id @default(autoincrement())
  level              Int
  note               String?
  createdAt          DateTime    @default(now())
  StorageUnit        StorageUnit @relation(references: [id], fields: [storageUnitId])
  storageUnitId      Int
  User               User        @relation(references: [id], fields: [userId])
  userId             Int
  Item               Item[]

  @@index([userId], name: "drawer_user")
  @@index([storageUnitId], name: "storage_unit")
}

model Item {
  id                 Int         @id @default(autoincrement())
  name               String
  imageFilename      String?
  imageUrl           String?
  imageHandle        String?
  createdAt          DateTime    @default(now())
  Drawer             Drawer @relation(references: [id], fields: [drawerId])
  drawerId           Int
  User               User        @relation(references: [id], fields: [userId])
  userId             Int
  Color              Color       @relation(references: [id], fields: [colorId])
  colorId            Int
  ItemType           ItemType    @relation(references: [id], fields: [itemTypeId])
  itemTypeId         Int

  @@index([userId], name: "item_user")
  @@index([drawerId], name: "item_drawer")
  @@index([colorId], name: "item_color")
  @@index([itemTypeId], name: "item_item_type")
}

model Streak {
  id          Int         @id @default(autoincrement())
  name        String
  last_date   DateTime    @db.Date
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "streak_user")
}

model Grocery {
  id          Int         @id @default(autoincrement())
  name        String
  boughtAt    DateTime    @default(now())
  expireAt    DateTime    @db.Date
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "grocery_user")
}

enum AccessibleType {
  Note
  ShoppingList
}

model Access {
  id Int @id @default(autoincrement())

  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  Note Note? @relation("NoteAccess", fields: [accessibleId], references: [id], map: "note_accessibleId")

  accessibleId   Int
  accessibleType AccessibleType
}

model ShoppingList {
  id                      Int                 @id @default(autoincrement())
  name                    String

  ShoppingListItem        ShoppingListItem[]

  User                    User                @relation(references: [id], fields: [userId])
  userId                  Int
}

model ShoppingListItem {
  id                      Int                 @id @default(autoincrement())
  name                    String
  bought                  Boolean             @default(false)

  ShoppingList            ShoppingList        @relation(references: [id], fields: [shoppingListId])
  shoppingListId          Int
}

model Person {
  id                      Int                 @id @default(autoincrement())
  name                    String

  User                    User                @relation(references: [id], fields: [userId])
  userId                  Int

  CallLog                 CallLog[]

  @@index([userId], name: "person_user")
}

model CallLog {
  id                      Int                 @id @default(autoincrement())
  note                    String              @db.Text

  Person                  Person              @relation(references: [id], fields: [personId])
  personId                Int

  User                    User                @relation(references: [id], fields: [userId])
  userId                  Int

  @@index([personId], name: "call_log_person")
  @@index([userId], name: "call_log_user")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  completedAt DateTime?

  User        User     @relation(references: [id], fields: [userId])
  userId      Int

  ProjectStage ProjectStage[]

  @@index([userId], name: "project_user")
}

model ProjectStage {
  id        Int      @id @default(autoincrement())
  name      String
  sortOrder Int      @default(0)
  color     String?

  Project   Project  @relation(references: [id], fields: [projectId])
  projectId Int

  ProjectTask ProjectTask[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId], name: "project_stage_project")
}

model ProjectTask {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  status        String
  sortOrder     Int         @default(0)
  dueDate       DateTime?
  labels        String[]    // Array of strings for labels/tags

  ProjectStage  ProjectStage @relation(references: [id], fields: [projectStageId])
  projectStageId Int

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([projectStageId], name: "project_task_project_stage")
}

model Setting {
  id            Int         @id @default(autoincrement())
  key           String
  value         String

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
