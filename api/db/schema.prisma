generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model User {
  id                  Int        @id @default(autoincrement())
  email               String     @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  Calendar            Calendar[]
  Task                Task[]
  Note                Note[]
  Journal             Journal[]
}

model Calendar {
  id        Int      @id @default(autoincrement())
  title     String
  color     String
  url       String   @db.Text
  User      User     @relation(references: [id], fields: [userId])
  createdAt DateTime @default(now())
  userId    Int

  @@index([userId], name: "user")
}

model Task {
  id          Int         @id @default(autoincrement())
  title       String
  dueDate     DateTime?   @db.Date
  priority    Int         @default(3)
  completed   Boolean     @default(false)
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "user")
}

model Note {
  id          Int         @id @default(autoincrement())
  path        String
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "user")
}

model Journal {
  id          Int         @id @default(autoincrement())
  forDate     DateTime    @db.Date
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "user")
  @@index([forDate], name: "forDate")
}
