generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model User {
  id                  Int        @id @default(autoincrement())
  email               String     @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  Calendar            Calendar[]
  Task                Task[]
  Note                Note[]
  Journal             Journal[]
  Color               Color[]
  ItemType            ItemType[]
  Room                Room[]
  StorageUnit         StorageUnit[]
  Drawer              Drawer[]
  Item                Item[]
  Streak              Streak[]
  Grocery             Grocery[]
  Access              Access[]
}

model Calendar {
  id        Int      @id @default(autoincrement())
  title     String
  color     String
  url       String   @db.Text
  User      User     @relation(references: [id], fields: [userId])
  createdAt DateTime @default(now())
  userId    Int

  @@index([userId], name: "user")
}

model Task {
  id          Int         @id @default(autoincrement())
  title       String
  dueDate     DateTime?   @db.Date
  priority    Int         @default(3)
  completed   Boolean     @default(false)
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "user")
  @@index([userId, dueDate, completed], name: "user_id_due_date_completed")
}

model Note {
  id          Int         @id @default(autoincrement())
  path        String
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  accesses Access[] @relation("NoteAccess")

  @@index([userId], name: "user")
}

model Journal {
  id          Int         @id @default(autoincrement())
  forDate     DateTime    @db.Date
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "user")
  @@index([forDate], name: "forDate")
}

model Color {
  id          Int         @id @default(autoincrement())
  color       String
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int
  Item        Item[]

  @@index([userId], name: "user")
}

model ItemType {
  id          Int         @id @default(autoincrement())
  itemType    String
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int
  Item        Item[]

  @@index([userId], name: "user")
}

model Room {
  id          Int         @id @default(autoincrement())
  name        String
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int
  StorageUnit StorageUnit[]

  @@index([userId], name: "user")
}

model StorageUnit {
  id          Int         @id @default(autoincrement())
  name        String
  createdAt   DateTime    @default(now())
  Room        Room        @relation(references: [id], fields: [roomId])
  roomId      Int
  User        User        @relation(references: [id], fields: [userId])
  userId      Int
  Drawer      Drawer[]

  @@index([userId], name: "user")
  @@index([roomId], name: "room")
}

model Drawer {
  id                 Int         @id @default(autoincrement())
  level              Int
  note               String?
  createdAt          DateTime    @default(now())
  StorageUnit        StorageUnit @relation(references: [id], fields: [storageUnitId])
  storageUnitId      Int
  User               User        @relation(references: [id], fields: [userId])
  userId             Int
  Item               Item[]

  @@index([userId], name: "user")
  @@index([storageUnitId], name: "storageUnit")
}

model Item {
  id                 Int         @id @default(autoincrement())
  name               String
  imageFilename      String?
  imageUrl           String?
  imageHandle        String?
  createdAt          DateTime    @default(now())
  Drawer             Drawer @relation(references: [id], fields: [drawerId])
  drawerId           Int
  User               User        @relation(references: [id], fields: [userId])
  userId             Int
  Color              Color       @relation(references: [id], fields: [colorId])
  colorId            Int
  ItemType           ItemType    @relation(references: [id], fields: [itemTypeId])
  itemTypeId         Int

  @@index([userId], name: "user")
  @@index([drawerId], name: "drawer")
  @@index([colorId], name: "color")
  @@index([itemTypeId], name: "itemType")
}

model Streak {
  id          Int         @id @default(autoincrement())
  name        String
  last_date   DateTime    @db.Date
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "user")
}

model Grocery {
  id          Int         @id @default(autoincrement())
  name        String
  boughtAt    DateTime    @default(now())
  expireAt    DateTime    @db.Date
  createdAt   DateTime    @default(now())
  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  @@index([userId], name: "user")
}

enum AccessibleType {
  Note
}

model Access {
  id Int @id @default(autoincrement())

  User        User        @relation(references: [id], fields: [userId])
  userId      Int

  Note Note? @relation("NoteAccess", fields: [accessibleId], references: [id], map: "note_accessibleId")

  accessibleId   Int
  accessibleType AccessibleType
}
